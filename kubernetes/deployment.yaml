apiVersion: "vault.banzaicloud.com/v1alpha1"
kind: "Vault"
metadata:
  name: "vault"
  labels:
    app.kubernetes.io/name: vault
    vault_cr: vault
spec:
  size: 3
  image: hashicorp/vault:1.14.1

  # Common annotations for all created resources
  annotations:
    common/annotation: "true"

  # Vault Pods , Services and TLS Secret annotations
  vaultAnnotations:
    type/instance: "vault"

  # Vault Configurer Pods and Services annotations
  vaultConfigurerAnnotations:
    type/instance: "vaultconfigurer"


  # Specify the ServiceAccount where the Vault Pod and the Bank-Vaults configurer/unsealer is running
  serviceAccount: vault

  # Specify the Service's type where the Vault Service is exposed
  # Please note that some Ingress controllers like https://github.com/kubernetes/ingress-gce
  # forces you to expose your Service on a NodePort
  serviceType: ClusterIP

  # Use local disk to store Vault raft data, see config section.
  volumeClaimTemplates:
    - metadata:
        name: vault-raft
      spec:
        # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
        storageClassName: "openebs-hostpath"
        accessModes:
          - ReadWriteOnce
        volumeMode: Filesystem
        resources:
          requests:
            storage: 1Gi
    - metadata:
        name: vault-plugins
      spec:
        storageClassName: "openebs-hostpath"
        accessModes:
          - ReadWriteOnce
        volumeMode: Filesystem
        resources:
          requests:
            storage: 200Mi
    - metadata:
        name: vault-plugins-config
      spec:
        configMap:
          name: vault-plugins

  volumeMounts:
    - name: vault-raft
      mountPath: /vault/file
    - name: vault-plugins
      mountPath: /vault/plugins
    - name: vault-plugins-config
      mountPath: /etc/

  # Add Velero fsfreeze sidecar container and supporting hook annotations to Vault Pods:
  # https://velero.io/docs/v1.2.0/hooks/
  veleroEnabled: true

  # Support for distributing the generated CA certificate Secret to other namespaces.
  # Define a list of namespaces or use ["*"] for all namespaces.
  caNamespaces: {}

  # Describe where you would like to store the Vault unseal keys and root token.
  unsealConfig:
    options:
      # The preFlightChecks flag enables unseal and root token storage tests
      # This is true by default
      preFlightChecks: true
      # The storeRootToken flag enables storing of root token in chosen storage
      # This is true by default
      storeRootToken: true
      # The secretShares represents the total number of unseal key shares
      # This is 5 by default
      secretShares: 5
      # The secretThreshold represents the minimum number of shares required to reconstruct the unseal key
      # This is 3 by default
      secretThreshold: 3
    kubernetes:
      secretNamespace: default

  # A YAML representation of a final vault config file.
  # See https://www.vaultproject.io/docs/configuration/ for more information.
  config:
    plugin_directory: "/vault/plugins"
    storage:
      raft:
        path: "/vault/file"
    listener:
      tcp:
        address: "0.0.0.0:8200"
        tls_cert_file: /vault/tls/server.crt
        tls_key_file: /vault/tls/server.key
    api_addr: https://vault.default:8200
    cluster_addr: "https://${.Env.POD_NAME}:8201"
    ui: true

  statsdDisabled: true

  serviceRegistrationEnabled: true

  resources:
    # A YAML representation of resource ResourceRequirements for vault container
    # Detail can reference: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container
    vault:
      limits:
        memory: "512Mi"
        cpu: "200m"
      requests:
        memory: "256Mi"
        cpu: "100m"

  # See: https://banzaicloud.com/docs/bank-vaults/cli-tool/#example-external-vault-configuration
  # The repository also contains a lot examples in the test/deploy and operator/deploy directories.
  externalConfig:
    policies:
      - name: allow_secrets
        rules: path "secret/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
          }
      - name: vault-plugin-sidecar
        rules: path "/sys/plugins/catalog/" {
            capabilities = ["create", "read", "update", "delete", "list"]
          }
          path "/sys/plugins/catalog/*" {
            capabilities = ["sudo", "create", "read", "update", "delete", "list"]
          }
    auth:
      - type: kubernetes
        roles:
          # Allow every pod in the default namespace to use the secret kv store
          - name: default
            bound_service_account_names: ["default", "vault-secrets-webhook"]
            bound_service_account_namespaces: ["default"]
            policies: allow_secrets
            ttl: 1h
          - name: vault-plugin-sidecar
            bound_service_account_names: [ "vault-plugin-sidecar" ]
            bound_service_account_namespaces: [ "default" ]
            policies: vault-plugin-sidecar
            ttl: 1h

    secrets:
      - path: secret
        type: kv
        description: General secrets.
        options:
          version: 2
    

  vaultEnvsConfig:
    - name: VAULT_LOG_LEVEL
      value: warning



---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vault
  namespace: default
  annotations:
    haproxy.org/server-ssl: "true"
spec:
  tls:
    - hosts:
        - vault.domain.com
      secretName: tls-domain-com
  rules:
    - host: vault.domain.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: vault
                port:
                  number: 8200
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-plugin-sidecar
  namespace: default
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-plugins
  namespace: default

data:
  plugins.yaml: |-
    s3:
      endpoint: "https://<bucket>.fra1.digitaloceanspaces.com"
      bucket: "<bucket>"
      token: "<secretName>"
      key: "<secretKey>"
  
    vault:
      plugin-dir: "/vault/plugins"
  
    plugins:
      plugin1: # <-- filename destination
        version: v3.0.0
        type: secret
        arch:
          amd64: plugin1-v3.0.0-amd64 # <-- filename source
          arm64: plugin1-v3.0.0-arm64 # <-- filename source
      plugin2: # <-- filename destination
        filename: plugin2-v1.2.1-amd64 # <-- filename source
        version: v1.2.1
        type: auth
        arch:
          amd64: plugin2-v1.2.1-amd64 # <-- filename source
          arm64: plugin2-v1.2.1-arm64 # <-- filename source
